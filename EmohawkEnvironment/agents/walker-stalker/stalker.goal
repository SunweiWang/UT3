init module {
	knowledge{
		% Computes the 3D distance between two locations.
		distance(location(X1,Y1,Z1),location(X2,Y2,Z2), Distance) :- Distance is abs(sqrt((X1-X2) **2 + (Y1-Y2)**2 + (Z1-Z2)**2)). 
	}
	
	beliefs{
		% The last destination used by walkTo and runTo. Usefull for debugging.
		destination(none).
	}

	actionspec{
		% Global action specification.
		
		stop {
			pre {true}
			post {true}
		}
		
		runTo(Destination) {
			pre {destination(PreviousDestination)}
			post {not(destination(PreviousDestination)),destination(Destination)}
		}

		walkTo(Destination) {
			pre {destination(PreviousDestination)}
			post {not(destination(PreviousDestination)),destination(Destination)}
		}
		
		jump {
			pre {true}
			post {true}					
		}

		
		turn(Degrees) {
			pre {true}
			post {true}					
		}
		
		skip {
			pre {true}
			post {true}				
		} 
	}
}
	
main module{
	program{

		if bel(person(_,'Walker',Location1,_,_,_,_),self(_,_,Location2,_,_,_,_), distance(Location1,Location2,Distance), Distance < 1000) then stop.      
		
		if bel(person(ID,'Walker',Location1,_,_,_,_),self(_,_,Location2,_,_,_,_), distance(Location1,Location2,Distance), Distance < 2000) then runTo(ID).      
		
		if bel(person(ID,'Walker',Location,_,_,_,_)) then runTo(ID).
		
		if bel(not(navigation(traveling)), navPoint(ID,_,_)) then runTo(ID).      

	}
}



event module {
	
	program{
			
		% Update the state of the navigation.
		forall bel(navigation(X)) do delete (navigation(X)).
		forall bel(percept(navigation(X))) do insert (navigation(X)).
		
		% Store all navpoints.
		forall bel(percept(navPoint(ID,Location,Neighbours)))  do insert(navPoint(ID,Location,Neighbours)).
		
		%Store all places.
		forall bel(percept(place(ID,Location,Range)))  do insert(place(ID,Location,Range)).

		%Update self percept.
		forall bel(self(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)) do delete(self(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)). 
		forall bel(percept(self(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR))) do insert(self(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)). 

		%Update percepts of people that we see.
		forall bel(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)) do delete(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)). 		
		forall bel( percept(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)))  do insert(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)).	
	}
	
}
