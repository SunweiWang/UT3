%%
% An agent that meets another for a brief visit to the cinema and drinks allot of coffee.
%
% @Author M.P. Korstanje
%%
init module {
	knowledge{
		% The name of this agent.
		myName(Name):- self(_,Name,_,_,_,_,_).
		
		% Current location
		myLocation(Location) :- self(_,_,Location,_,_,_,_).
		
		% Aliases for quick lookup.
		home(Location,Range) :- place(barbara_home,Location,Range).
		restaurant(Location,Range) :- place(restaurant,Location,Range).
		cinema(Location,Range) :- place(cinema,Location,Range).
		park(Location,Range) :- place(park,Location,Range).
		sphere(Location,Range) :- place(sphere,Location,Range).
	
		% The location for the meeting in the park
		parkMeetingJan(Location) :- place(park,ParkLocation,Range),locationAdd(ParkLocation,location(100,0,0),Location) .
		parkMeetingPier(Location) :- place(park,ParkLocation,Range),locationAdd(ParkLocation,location(-100,0,0),Location) .
		
		% The location for this agent.
		parkMeeting(Location) :-  myName('Jan'),parkMeetingJan(Location).
		parkMeeting(Location) :-  myName('Pier'),parkMeetingPier(Location).
		
		% The location where the other guy will stand
		parkMeetingOther(Location) :- myName('Jan'),parkMeetingPier(Location).
		parkMeetingOther(Location) :- myName('Pier'),parkMeetingJan(Location).

		% The location for the meeting in the cinema.
		cinemaMeetingJan(Location) :- place(cinema,CinemaLocation,Range),locationAdd(CinemaLocation,location(100,0,0),Location) .
		cinemaMeetingPier(Location) :- place(cinema,CinemaLocation,Range),locationAdd(CinemaLocation,location(-100,0,0),Location) .
		
		%Location where this agent will stand.
		cinemaMeeting(Location) :-  myName('Jan'),cinemaMeetingJan(Location).
		cinemaMeeting(Location) :-  myName('Pier'),cinemaMeetingPier(Location).

		% Info about the other guy
		personAt(Name,Location) :- person(_,Name,PersonLocation,_,_,_,_), distanceLt(Location,PersonLocation,80).
		otherAtParkMeeting :- myName('Jan'), parkMeetingPier(Location), personAt('Pier',Location).
		otherAtParkMeeting :- myName('Pier'), parkMeetingJan(Location), personAt('Jan',Location).
		
		%Adds first two locations, returns result in third 
		locationAdd(location(X1,Y1,Z1),location(X2,Y2,Z2), location(X,Y,Z)) :-  X is X1 + X2, Y is Y1 + Y2, Z is Z1 + Z2.
		% Measures distance between two locations.
		distance(location(X1,Y1,Z1),location(X2,Y2,Z2),Distance) :- Distance is sqrt((X1 - X2) ** 2 + (Y1 - Y2) ** 2 +(Z1 - Z2) ** 2 ).			
		% Holds if the distance between both locations is less then the MaxDistance.
		distanceLt(Location1,Location2,MaxDistance) :- distance(Location1,Location2,Distance), Distance < MaxDistance.
		% Holds if the agent is within 200 units of the location.
		atLocation(Location) :- myLocation(MyLocation), distanceLt(MyLocation,Location,200).
		% Alias for barbara_home to make the code easier to read.
		at(home) :- at(barbara_home).
		
	}

	beliefs{
		% Stores the destination of the last walkTo and runTo actions.
		destination(none).
		% The state of the navigation. Indicates if the agent is navigating towards 
		% a destination, got stuck or is waiting for a new location to go to. Will be 
		% updated by percepts.
		navigation(unknown).
		% Information about ourself. Will be updated with percepts. 
		self(unknown,unknown,unknown,unknown,unknown,unknown,unknown).
	}
		
	goals{
		% This agent wants to have some coffee.
		coffee.	
	}
		
	actionspec{
		% Stops the agent in place. Next navigation state percept will be navigation(waiting).
		stop {
			pre {true}
			post {true}
		}
		
		% Makes the agent run to the destintion. Next navigation state percept will be 
		% navigation(traveling).
		runTo(Destination) {
			pre {destination(PreviousDestination)}
			post {not(destination(PreviousDestination)),destination(Destination)}
		}
		
		% Makes the agent walk tot he destination. Next navigation state percept will be 
		% navigation(traveling).
		walkTo(Destination) {
			pre {destination(PreviousDestination)}
			post {not(destination(PreviousDestination)),destination(Destination)}
		}		
		
		% Makes the agent follow the player with the given ID. Next navigation state 
		% percept will be navigation(traveling).
		walkAlong(PlayerID) {
			pre {}
			post {}
		}
		
		% Makes the agent display the given emoticons. The next self percepts will 
		% contain the emoticons.  
		emote(Left,Center,Right){
			pre {}
			post {}			
		}
		
		% As it says on the tin.
		jump {
			pre {true}
			post {true}					
		}

		% Turns the given numbers of degrees.
		turn(Degrees) {
			pre {true}
			post {true}					
		}
		
		% Turns to the given location.
		turnTo(Location) {
			pre {true}
			post {true}					
		}
		
		% Does nothing.
		skip {
			pre {true}
			post {true}				
		}
	}

}

%%
% The comphrehension agent has two activities. A work-coffee cycle and a friendly 
% meeting at the cinema. The work-coffee cycle has been implemented. The meeting 
% hasn't been yet.
%%
main module {

	program{
		if bel(false) then meeting.
		if bel(true) then workCoffeeCycle.	
	}
}

%%
% Describes the scenario of two agents meeting each other.
%%
module meeting{

	program{
		% TODO: Not yet implemented. See the assignment.
		if true then skip.
	}
}

%%
% This module describes an everlasting work-coffee cycle. Brief moments of work
% interupted by a walk to the coffee machine.
%%
module workCoffeeCycle{

	program{
		%If we are going places, don't bother.
		if bel(navigation(traveling)) then skip.
		
		% If we are at home, we work.
		if a-goal(work), bel(at(home)) then work.
		% If we want to work but are not at home, we go home.
		if a-goal(work), bel(home(Location,Range)) then runTo(Location).	
		% We can order coffee at the restaurant.
		if a-goal(coffee), bel(at(restaurant)) then orderCoffee.		
		% If we want coffee, we get it at the resaurant.
		if a-goal(coffee), bel(restaurant(Location,Range)) then runTo(Location).
	}
}

%%
% Simulates the agents attempt at work. Only to result in a desire for more coffee.
%%
module work {

	program{
		if bel(not(triedWork)) then emote(none,hammer_179,none) + insert(triedWork).
		if true then drop(work) + adopt(coffee) + delete(triedWork). 
	}
		
}

%%
% Takes care of ordering coffee. After the coffee has been ordered
% the agent will feel refreshed and inclined to work. (A goal work will be added).
%%
module orderCoffee {

	program{
		% Order a coffee by emoting one. (typos in emote are in source).
		if bel(not(orderedOne)) then emote(none,cofee_36,none) + insert(orderedOne).
		% No, actually make that a double.
		if bel(not(orderedDoubleEspresso)) then emote(cofee_36,none,cofee_36) + insert(orderedDoubleEspresso).
		% That was some good cofee!
		if bel(not(jumped)) then jump + insert(jumped).
		% Time to get back to work!
		if true then drop(coffee) + adopt(work) + delete(orderedOne,orderedDoubleEspresso,jumped). 
	}
		
}

%%
% The agent will turn towards the counter.
%%
module turnToCounter {

	program{
		% Turntowards the Counter.
		if bel(lookingAt) then exit-module.
		if bel(counter(_,Position,_)) then turnTo(Position).
	}
		
}
event module{
	program {		
		%Store all places.
		forall bel(percept(place(ID,Location,Range)))  do insert(place(ID,Location,Range)).	
		
		% Update the state of the navigation.
		forall bel(navigation(OldState), percept(navigation(NewState))) 
		do delete (navigation(OldState)) + insert(navigation(NewState)).

		%Update self percept.
		forall bel(self(OldID,OldName,OldLocation,OldRotation,OldEmoteL,OldEmoteC,OldEmoteR), percept(self(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR))) 
		do delete (self(OldID,OldName,OldLocation,OldRotation,OldEmoteL,OldEmoteC,OldEmoteR)) + insert(self(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)).
		
		%Clear out percepts of the people we have seen and replace them with those we see now.
		forall bel(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)) do delete(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)). 		
		forall bel( percept(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)))  do insert(person(ID,Name,Location,Rotation,EmoteL,EmoteC,EmoteR)).
		
		%Where are we?
		forall bel(at(Place)) do delete(at(Place)).
		forall bel(place(Place,Location,Range),myLocation(MyLocation), distanceLt(Location,MyLocation,Range)) do insert (at(Place)).

	}
	
}

