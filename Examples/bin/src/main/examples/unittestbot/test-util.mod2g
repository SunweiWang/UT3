%%
%
% Waits for a weapon to be added to the inventory. 
%
%%
module awaitWeapon(Type) [focus=new,exit=nogoals]{

	knowledge{
		hasWeapon(Type) :- weapon(Type,_,_).
	}

	goals{
		hasWeapon(Type).
	}

	program {
		if true then skip.
	}
	
	actionspec {
		skip@int {
			pre{}
			post{}
		}
	}
}
%%
%
% Waits for a weapon to be added to the inventory. 
%
%%
module awaitWeapon(Type,PriAmmo,SecAmmo) [focus=new,exit=nogoals]{

	goals{
		weapon(Type,PriAmmo,SecAmmo).
	}

	program {
		if true then skip.
	}
	
	actionspec {
		skip@int {
			pre{}
			post{}
		}
	}
}
%%
%
% Waits until agent with 'name' appears.
%
%%
module await(Name) [focus=new,exit=nogoals] {

	goals{
		agent(Name).
	}
	
	program {
		if true then skip.
	}
	
	actionspec {
		skip@int {
			pre{}
			post{}
		}
	}
}

module awaitSelf [focus=new,exit=nogoals] {

	goals{
		hasSelf.
	}
	
	program {
		if bel(not(self(none,none,none))) then exit-module.
	}
	
	actionspec {
		skip@int {
			pre{}
			post{}
		}
	}
}

%%
%
% Waits for 'duration' seconds. 
%
%%
module wait(Duration) [focus=new,exit=nogoals] {

	knowledge {
		passedSinceStart(Duration) :- start(Start),passedSince(Duration,Start).
		passedSince(Duration,Start):- get_time(Now), durationLt(Start,Now,Duration).
		durationLt(Start,End,Duration) :- duration(Start,End,Duration2), Duration2 >= Duration. 
		duration(Start,End,Duration) :- Duration is End - Start.
	}

	goals{
		wait.
	}
	
	program {
		if bel(not(start(_)), get_time(Now)) then insert(start(Now)).
		if bel(passedSinceStart(Duration),start(Then)) then delete(start(Then)) + exit-module.
	}
	
	actionspec {
		skip@int {
			pre{}
			post{}
		}
	}
}
