init module {
	knowledge{
		at(UnrealLocId) :- navigation(reached, UnrealLocId).
	}
	
	beliefs{
		% navigation(Status,Destination). Initially, we are going nowhere.
		navigation(none, none).
		
		% DO NOT REMOVE OR MODIFY the pickupWeapons predicate nor the maxLevelOfArmour predicate!
		% We use this to keep track of the list of weapons that the bot picked up so far. 
		pickedupWeapons([]).
		% We use this to keep track of the value of armour. 
		maxLevelOfArmour(0).
	}
	program{
		% The base percept provides the location of all team bases. It is a "send once" percept.
		% The base position is the position where the flag is located, which we store in the belief base.
		forall bel( percept(base(Team, UnrealID)) ) do insert( flagPosition(UnrealID) ).
	}
	actionspec{
		navigate(Destination) {
			pre{ true }
			post{ true }
		}
	}
}

main module {
	program{
		% if our goal differs from actual target, tell bot to go there
		if goal(at(UnrealLocId)), not(bel(navigation(navigating, UnrealLocId)))
			then navigate(UnrealLocId).
	}
}

event module {
	program {	
		% Update the navigation state of the bot that is controlled. navigation is a "send on change" percept.
		forall bel( navigation(OldStatus, OldDest),  percept(navigation(Status, Destination)) )
			do delete( navigation(OldStatus, OldDest) ) + insert( navigation(Status, Destination) ).

		% if goal reached, pick new goal.			
		if not(goal(at(_))), bel(flagPosition(UnrealLocID)) then adopt(at(UnrealLocID)).

		% DO NOT REMOVE OR MODIFY any of the percept rules below!
		% We use these to keep track of weapons picked up and the level of armour.	
		%forall bel( percept(weapon(Weapon,_,_)) ) do {
		%	if bel( pickedupWeapons(PUW), not(member(Weapon, PUW)) ) 
		%		then insert( not(pickedupWeapons(PUW)), pickedupWeapons([Weapon|PUW]) ).
		%}
		% Next rule keeps track of the maximum level of armour achieved.
		forall bel( percept(status(_,Armour,_,_)), maxLevelOfArmour(LastMaxArmour), Armour > LastMaxArmour )
			do delete( maxLevelOfArmour(LastMaxArmour) ) + insert( maxLevelOfArmour(Armour) ).


	}
}
