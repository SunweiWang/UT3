#import "server.mod2g".
#import "test-util.mod2g".

init module {
	knowledge{
		% The known teams
		aTeam(red). aTeam(blue).
		% The team this bot is on.
		myTeam(Team) :- self(_,_,Team),aTeam(Team).
		% The other team
		oppTeam(Team) :- aTeam(Team),not(myTeam(Team)).
	
		%The navpoints of the flag bases.
		myFlagBase(Nav) :- myTeam(Team),base(Team,Nav).
		oppFlagBase(Nav) :- oppTeam(Team),base(Team,Nav).
		
		%Does this bot have the flag?
		hasFlag :- self(Holder,_,_),flagOf(_,Holder,_).
		
		%Is our flag taken
		flagTaken :- myTeam(Team), flagState(Team,held).
		%Do we hold opponent flag
		flagHeld :- oppTeam(Team), flagState(Team,held).
		
		%dropped flag 
		flagDropped(Team, Location) :- flagOf(Team,none,Location), flagState(Team,dropped).
		
		%flag carrier
		carrier(UnrealID,Team,Location) :- flagOf(_,UnrealID,_), bot(UnrealID,_,Team, Location,_, _).
		
		weapon(Weapon) :- weapon('UTGame.UTWeap_ShockRifle').
	
	}
	
	beliefs{
		%%
		% Beliefs required for actions
		%%
		
		destination(none). % We are going nowhere.
		
		target(none). % We target no one.
		
		
		%%
		% Beiefs required for percepts
		%%
		
		self(none,none,none).

		orientation(none,none,none).
		
		navigation(none, none).
		
		status(none,none,none,none).
		
		score(none,none,none).
		
		currentWeapon(none,none).
		
		game(none, none, none, none).
		
		teamScore(none, none).	
	}
	

	
	actionspec{
		
		
		navigate(Destination) {
			pre{destination(PrevDestination)}
			post{not(destination(PrevDestination)), destination(Destination)} 
		}
		
		shoot(Targets){
			pre{target(PrevTargets)}
			post{not(target(PrevTargets)), target(Targets)}
		}
		
	}

}

main module {
	goals{
		beNot. % never achieved, slightly philosophical.
	}
	program [order=random]	{				
		%%
		% Rules for capturing the flag. Not that advanced.   
		%%
		if bel(not(flagHeld))  then captureFlag. 
		if bel(hasFlag) then returnFlag.
		
		% Recover captured flags.
		if bel(not(hasFlag), flagHeld, flagTaken) then recoverFlag.

		%%
		% Go after people with flags
		%%
		if bel(carrier(UnrealID,Team,Location),not(hasFlag)) then navigate(UnrealID).
		if bel(carrier(UnrealID,Team,Location) ) then shoot([enemyFlagCarrier, nearestEnemy]).
		
		%%
		% Pick up an item.
		%%
		if bel(not(hasFlag),not(navigation(navigating,_)), pickup(ID,_,_,_)) then navigateWithPicksups(ID).

	}
}

%%
% Runs to enemy flag base and returns it if captured
%%
module captureFlag [exit=noaction]{
	
	program{
		% I don't have the flag, nor does my team. Go get it
		if bel(not(flagHeld),oppFlagBase(Nav)) then navigateWithPicksups(Nav).
	}
}


%%
% Hunt carrier 
%%
module recoverFlag [exit=nogoals, focus=new]{
	
	knowledge{
		notFlagTaken :- not(flagTaken).
	}
	
	goals {
		notFlagtaken.	
	}
	
	program{
		
		% No longer valid once bot has the flag.
		if bel(hasFlag) then exit-module.
				
		% Enemy bot has the flag. Stay alive and near opp base.
		if bel(oppFlagBase(Nav),atLocation(Nav),item(_,_,_,Location)) then navigateWithPicksups(Location).
		if bel(oppFlagBase(Nav)) then navigateWithPicksups(Nav).
	}
}

%%
% Returns to flag base and picksup things.
%%
module returnFlag [exit=nogoals, focus=new]{
	
	knowledge{
		notHasFlag :- not(hasFlag).		
	}
	
	goals{
		notHasFlag.
	}
	
	program{
		
		% Bot has the flag. Stay alive and near base.
		if bel(hasFlag, myFlagBase(Nav),atLocation(Nav),item(_,_,_,Location)) then navigateWithPicksups(Location).
		if bel(hasFlag, myFlagBase(Nav)) then navigate(Nav).
	}
}



%%
% While running to a destination the bot will attempt to pick up any weapon it doesn't yet have.
%%
module navigateWithPicksups(Destination)[exit=nogoals,focus=new]{

	knowledge{
		% If the bot has the weapons
		hasWeapon(Type) :- weapon(Type,_,_).
		
		% Location of this bot
		myLocation(Location) :- orientation(Location,_,_).
		
		%Adds first two locations, returns result in third 
		locationAdd(location(X1,Y1,Z1),location(X2,Y2,Z2), location(X,Y,Z)) :-  X is X1 + X2, Y is Y1 + Y2, Z is Z1 + Z2.
		% Measures distance between two locations.
		distance(location(X1,Y1,Z1),location(X2,Y2,Z2),Distance) :- Distance is sqrt((X1 - X2) ** 2 + (Y1 - Y2) ** 2 +(Z1 - Z2) ** 2 ).			
		% Holds if the distance between both locations is less then the MaxDistance.
		distanceLt(Location1,Location2,MaxDistance) :- distance(Location1,Location2,Distance), Distance < MaxDistance.								 
		
		atLocation(Location) :- myLocation(MyLocation), distanceLt(Location,MyLocation,80).
		atLocation(NavPointId) :-navPoint(NavPointId, Position, _), atLocation(Position). 

	}
	
	goals{
		atLocation(Destination).     
	}
	
	program{
	
		% abort if stuck, or unreachable
		if bel(navigation(stuck,_) ; navigation(noPath,_)) then exit-module.
		
		% Recover dropped flags.
		if bel(flagDropped(_, Location)) then navigate(Location). 
		% Pick up weapon of opportunity
		if bel(item(Id,weapon,Type,Location), not(hasWeapon(Type))) then navigate(Location).
		% Navigate to destination
		if bel(not(navigation(navigating,_))) then navigate(Destination).
	}
	
}

	 
event module {
	program {
		%%
		% Information about the bot
		%%
		
		% Add info about self. On change.
		forall bel(self(OldID,OldName,OldTeam), percept(self(ID,Name,Team))) 
		do delete( self(OldID,OldName,OldTeam)) + insert(self(ID,Name,Team)).		
		
		% Update moving. On change.
		forall bel(orientation(OldPosition,OldRotation,OldVelocity),   percept(orientation(Position,Rotation,Velocity))) 
		do delete (orientation(OldPosition,OldRotation,OldVelocity)) +  insert(orientation(Position,Rotation,Velocity)).

		% Update status. On change.
		forall bel(status(OldHealth,OldArmor,OldAdrenaline,OldCombo),  percept(status(Health,Armor,Adrenaline,Combo))) 
		do delete( status(OldHealth,OldArmor,OldAdrenaline,OldCombo)) + insert(status(Health,Armor,Adrenaline,Combo)).
		
		% Update track reckord. On change.
		forall bel(score(OldKills,OldDeaths,OldSuicides),  percept(score(Kills,Deaths,Suicides))) 
		do delete( score(OldKills,OldDeaths,OldSuicides)) + insert(score(Kills,Deaths,Suicides)).
	
			
		% Update currentweapon. On Change.
		forall bel(percept(currentWeapon(Weapon,FireMode)), currentWeapon(OldWeapon,OldFireMode)) 
		do delete(currentWeapon(OldWeapon,OldFireMode)) + insert(currentWeapon(Weapon,FireMode)) .
		
		% Update weapons in inventory. On change with negation.
		forall bel(percept(weapon(Name,PriAmmo,SecAmmo))) do insert(weapon(Name,PriAmmo,SecAmmo)).
		forall bel(percept(not(weapon(Name,PriAmmo,SecAmmo)))) do delete(weapon(Name,PriAmmo,SecAmmo)).
		
		
		%%
		% Action percepts
		%%

		% Update navigation state. On Change
		forall bel(navigation(OldStatus,OldDest),  percept(navigation(Status,Dest)))
		do delete( navigation(OldStatus,OldDest)) + insert(navigation(Status,Dest)).
		
		%Requested path. Always.
		forall bel(percept(path(Origin,Dest,Lenght,Path))) do insert(path(Lenght,Path)). 


		%Add logic iteration. On change.
		forall bel(logic(OldIterations), percept(logic(Iterations))) 
		do delete( logic(OldIterations)) + insert(logic(Iterations)).
		
		%Add count of actions executed. On change
		forall bel(actionCount(OldIterations), percept(actionCount(Iterations))) 
		do delete( actionCount(OldIterations)) + insert(actionCount(Iterations)).
		
		%%
		% Game info
		%%
		
		% The pickup spots on the map. Once. Add position so we can do distance base heuristics.
		forall bel(percept(pickup(UnrealID, Label, ItemType)), percept(navPoint(UnrealID,Position,_))) 
		do insert(pickup(UnrealID, Position,Label, ItemType)).
		
		forall bel(percept(navPoint(UnrealID,Position,Neighbours)))
		do insert(navPoint(UnrealID,Position,Neighbours)).
		
		% The base. Has flag. Once
		forall bel(percept(	base(Team, UnrealID))) 
		do insert(		 	base(Team, UnrealID)).

		% Information about the game. On Change.
		forall bel(game(OldGametype, OldMap, OldTeamScoreLimit, OldRemainingTime),  percept(game(Gametype, Map, TeamScoreLimit, RemainingTime))) 
		do delete( game(OldGametype, OldMap, OldTeamScoreLimit, OldRemainingTime)) + insert(game(Gametype, Map, TeamScoreLimit, RemainingTime)).

		% Team score. On change
		forall bel(teamScore(OldTeamScore, OldOpponentTeamScore),  percept(teamScore(TeamScore, OpponentTeamScore))) 
		do delete( teamScore(OldTeamScore, OldOpponentTeamScore)) + insert(teamScore(TeamScore, OpponentTeamScore)).

		% Flag state. On change with negation.		
		forall bel(percept(flagState(Team,FlagState))) do insert(flagState(Team,FlagState)).
		forall bel(percept(not(flagState(Team,FlagState)))) do delete(flagState(Team,FlagState)).
		
		%%
		% See percepts
		%%
				
		% The pickup spots we can see.
		forall bel(percept(pickup(ID))) do insert(pickup(ID)).
		forall bel(percept(not(pickup(ID)))) do delete(pickup(ID)).
		
		% The items we can see
		forall bel(percept(item(Id,Category,Type,Location))) do insert(item(Id,Category,Type,Location)).
		forall bel(percept(not(item(Id,Category,Type,Location)))) do delete(item(Id,Category,Type,Location)).
		
		% See a flag. On change with negation.
		forall bel(percept(flag(Team, HolderId, Location))) do insert(flagOf(Team, HolderId, Location)).
		forall bel(percept(not(flag(Team, HolderId, Location)))) do delete(flagOf(Team, HolderId, Location)).
		
		% See a bot. On change with negation.
		forall bel(percept(	   bot(ID,Name,Team,Postion,Weapon,FireMode)))  do insert(bot(ID,Name,Team,Postion,Weapon,FireMode)).
		forall bel(percept(not(bot(ID,Name,Team,Postion,Weapon,FireMode)))) do delete(bot(ID,Name,Team,Postion,Weapon,FireMode)).
		
		
	}
}


